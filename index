<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
<title>Theater Musical Spiel - Patrick Stanke Style</title>
<style>
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0; 
    background: #110a20;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: white;
    overflow: hidden;
  }
  #gameCanvas {
    background: linear-gradient(to top, #3a1a47 0%, #6a3f81 70%, #9a65b7 100%);
    display: block;
    margin: 0 auto;
    border: 5px solid #512a6a;
    border-radius: 12px;
  }
  #ui {
    width: 400px;
    margin: 10px auto;
    text-align: center;
  }
  button.control-btn {
    font-size: 1.5rem;
    margin: 0 10px;
    padding: 10px 15px;
    border-radius: 10px;
    border: none;
    background: #754a9f;
    color: white;
    user-select: none;
  }
  button.control-btn:active {
    background: #a477d1;
  }
  #touchControls {
    display: none;
    margin-top: 10px;
  }
  @media (max-width: 600px) {
    #gameCanvas {
      width: 100vw;
      height: 60vh;
      border-width: 3px;
    }
    #ui {
      width: 100vw;
    }
    #touchControls {
      display: flex;
      justify-content: center;
    }
  }
</style>
</head>
<body>

<canvas id="gameCanvas" width="400" height="240"></canvas>

<div id="ui">
  <div>
    <span>Level: <span id="level">1</span></span> | 
    <span>Leben: <span id="lives">3</span></span> | 
    <span>Notenblätter: <span id="score">0</span></span>
  </div>
  <div id="touchControls">
    <button id="leftBtn" class="control-btn">◀</button>
    <button id="upBtn" class="control-btn">▲</button>
    <button id="rightBtn" class="control-btn">▶</button>
    <button id="downBtn" class="control-btn">▼</button>
  </div>
</div>

<script>
// --- Setup Canvas ---
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const W = canvas.width;
const H = canvas.height;

// --- UI Elemente ---
const levelText = document.getElementById('level');
const livesText = document.getElementById('lives');
const scoreText = document.getElementById('score');

// --- Spielfigur als Cartoon-Patrick Stanke (stilisiert) ---
class Player {
  constructor() {
    this.x = 50;
    this.y = H - 70;
    this.width = 40;
    this.height = 60;
    this.speed = 3;
    this.vx = 0;
    this.vy = 0;
    this.color = '#d49db2'; // Hautfarbe
    this.lives = 3;
    this.score = 0;
  }
  
  draw() {
    // Körper
    ctx.fillStyle = '#4b2e83'; // Dunkles lila Hemd
    ctx.fillRect(this.x, this.y + 20, this.width, this.height - 20);
    
    // Kopf (oval)
    ctx.fillStyle = this.color;
    ctx.beginPath();
    ctx.ellipse(this.x + this.width/2, this.y + 15, 18, 22, 0, 0, Math.PI * 2);
    ctx.fill();

    // Haare (stylisiert, dunkelbraun)
    ctx.fillStyle = '#3a1f0b';
    ctx.beginPath();
    ctx.ellipse(this.x + this.width/2, this.y + 8, 20, 15, 0, 0, Math.PI * 2);
    ctx.fill();

    // Augen
    ctx.fillStyle = 'white';
    ctx.beginPath();
    ctx.ellipse(this.x + 14, this.y + 15, 6, 4, 0, 0, Math.PI * 2);
    ctx.ellipse(this.x + 26, this.y + 15, 6, 4, 0, 0, Math.PI * 2);
    ctx.fill();

    ctx.fillStyle = 'black';
    ctx.beginPath();
    ctx.ellipse(this.x + 14, this.y + 15, 3, 3, 0, 0, Math.PI * 2);
    ctx.ellipse(this.x + 26, this.y + 15, 3, 3, 0, 0, Math.PI * 2);
    ctx.fill();

    // Mund (leicht lächelnd)
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(this.x + 15, this.y + 28);
    ctx.quadraticCurveTo(this.x + 20, this.y + 32, this.x + 30, this.y + 28);
    ctx.stroke();
  }
  
  update() {
    this.x += this.vx;
    this.y += this.vy;

    // Bildschirmbegrenzung
    if(this.x < 0) this.x = 0;
    if(this.x + this.width > W) this.x = W - this.width;
    if(this.y < 0) this.y = 0;
    if(this.y + this.height > H) this.y = H - this.height;
  }
}

// --- Notenblatt als Sammelobjekt ---
class Note {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.size = 20;
    this.collected = false;
  }
  
  draw() {
    if(this.collected) return;
    ctx.fillStyle = '#f9f871';
    ctx.strokeStyle = '#b0a74a';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.rect(this.x, this.y, this.size, this.size * 1.2);
    ctx.fill();
    ctx.stroke();
    
    // Notenlinien
    ctx.strokeStyle = '#8c7b2e';
    ctx.lineWidth = 1;
    for(let i=0; i<4; i++) {
      ctx.beginPath();
      ctx.moveTo(this.x + 3, this.y + 4 + i*5);
      ctx.lineTo(this.x + this.size - 3, this.y + 4 + i*5);
      ctx.stroke();
    }
    // Notenschlüssel - simple G-Form
    ctx.beginPath();
    ctx.moveTo(this.x + this.size/2, this.y + this.size*0.3);
    ctx.bezierCurveTo(this.x + this.size/2 + 5, this.y + this.size*0.5, this.x + this.size/2 - 5, this.y + this.size*0.7, this.x + this.size/2 + 2, this.y + this.size*0.9);
    ctx.stroke();
  }
}

// --- Level-Design (Theaterbühne mit Balken als Plattformen) ---
class Level {
  constructor(number) {
    this.number = number;
    this.platforms = [];
    this.notes = [];
    this.endX = W - 50;
    this.endY = H - 80;
    
    // Einfachere Levelaufteilung, mehr Plattformen mit jedem Level
    let platHeight = 15;
    
    // Bodenplattform
    this.platforms.push({x:0, y:H-20, width:W, height:platHeight});
    
    if(number === 1) {
      this.platforms.push({x:100, y:H-70, width:100, height:platHeight});
      this.notes.push(new Note(130, H-100));
      this.notes.push(new Note(220, H-100));
    }
    else if(number === 2) {
      this.platforms.push({x:50, y:H-90, width:80, height:platHeight});
      this.platforms.push({x:180, y:H-140, width:90, height:platHeight});
      this.notes.push(new Note(60, H-120));
      this.notes.push(new Note(200, H-170));
      this.notes.push(new Note(250, H-170));
    }
    else if(number === 3) {
      this.platforms.push({x:30, y:H-70, width:70, height:platHeight});
      this.platforms.push({x:110, y:H-110, width:90, height:platHeight});
      this.platforms.push({x:220, y:H-150, width:120, height:platHeight});
      this.notes.push(new Note(40, H-100));
      this.notes.push(new Note(150, H-140));
      this.notes.push(new Note(260, H-180));
      this.notes.push(new Note(320, H-180));
    }
    else {
      // Einfach wieder Level 1 als default
      this.platforms.push({x:100, y:H-70, width:100, height:platHeight});
      this.notes.push(new Note(130, H-100));
      this.notes.push(new Note(220, H-100));
    }
  }
  
  draw() {
    // Bühne: Bodenfarbe dunkler Holzboden mit Muster
    ctx.fillStyle = '#5a3e1b';
    ctx.fillRect(0, H - 20, W, 20);
    
    // Plattformen als Holzbalken
    ctx.fillStyle = '#704c17';
    for(let p of this.platforms) {
      ctx.fillRect(p.x, p.y, p.width, p.height);
      // Balkenstruktur (einfach)
      ctx.strokeStyle = '#a87f30';
      ctx.lineWidth = 2;
      for(let i=0; i < p.width; i += 15) {
        ctx.beginPath();
        ctx.moveTo(p.x + i, p.y);
        ctx.lineTo(p.x + i, p.y + p.height);
        ctx.stroke();
      }
    }
    
    // Zeichne Notenblätter
    for(let n of this.notes) {
      n.draw();
    }
    
    // Level-Ausgang (Tür als rote Vorhangrolle)
    ctx.fillStyle = '#a02e2e';
    ctx.fillRect(this.endX, this.endY, 30, 60);
    ctx.fillStyle = '#600e0e';
    ctx.fillRect(this.endX + 5, this.endY + 5, 20, 50);
  }
}

// --- Globale Variablen ---
let player = new Player();
let currentLevel = 1;
let level = new Level(currentLevel);
let keysPressed = {};

// --- Kollisionserkennung mit Plattformen ---
function checkCollisionWithPlatforms(obj) {
  for(let p of level.platforms) {
    // Check nur Y-Kollision von oben (einfachste Variante)
    if(obj.x < p.x + p.width &&
       obj.x + obj.width > p.x &&
       obj.y + obj.height <= p.y + 10 && // knapp unter Plattformoberkante
       obj.y + obj.height + player.vy >= p.y) {
      // Kollision oben erkannt
      obj.y = p.y - obj.height;
      return true;
    }
  }
  return false;
}

// --- Kollision mit Notenblättern ---
function checkCollectNotes() {
  for(let n of level.notes) {
    if(!n.collected) {
      if(player.x < n.x + n.size &&
         player.x + player.width > n.x &&
         player.y < n.y + n.size * 1.2 &&
         player.y + player.height > n.y) {
        n.collected = true;
        player.score++;
        scoreText.textContent = player.score;
      }
    }
  }
}

// --- Kollision mit Levelende ---
function checkLevelComplete() {
  if(player.x + player.width > level.endX &&
     player.y + player.height > level.endY) {
    currentLevel++;
    if(currentLevel > 3) {
      alert('Herzlichen Glückwunsch! Du hast alle Levels geschafft!');
      currentLevel = 1;
      player.score = 0;
    }
    level = new Level(currentLevel);
    levelText.textContent = currentLevel;
    player.x = 50;
    player.y = H - 70;
  }
}

// --- Steuerung & Bewegung ---
function updatePlayerMovement() {
  player.vx = 0;
  player.vy = 0;
  
  if(keysPressed['ArrowLeft']) player.vx = -player.speed;
  if(keysPressed['ArrowRight']) player.vx = player.speed;
  if(keysPressed['ArrowUp']) {
    // Springen nur wenn auf Plattform (einfacher Check)
    if(checkCollisionWithPlatforms(player)) {
      player.vy = -10;
    }
  }
  
  // Schwerkraft
  player.vy += 0.5;
  
  player.x += player.vx;
  player.y += player.vy;

  // Plattformkollision & "Boden" fix
  if(checkCollisionWithPlatforms(player)) {
    player.vy = 0;
  } else {
    // fällt runter -> Check ob Boden erreicht
    if(player.y + player.height > H) {
      player.lives--;
      livesText.textContent = player.lives;
      if(player.lives <= 0) {
        alert("Game Over! Du hast keine Leben mehr.");
        currentLevel = 1;
        player.lives = 3;
        player.score = 0;
        livesText.textContent = player.lives;
        scoreText.textContent = player.score;
      }
      levelText.textContent = currentLevel;
      level = new Level(currentLevel);
      player.x = 50;
      player.y = H - 70;
      player.vx = 0;
      player.vy = 0;
    }
  }
  
  // Bildschirmbegrenzung (horizontal)
  if(player.x < 0) player.x = 0;
  if(player.x + player.width > W) player.x = W - player.width;
  
  // Vertikal oben begrenzen
  if(player.y < 0) player.y = 0;
}

// --- Game Loop ---
function gameLoop() {
  ctx.clearRect(0, 0, W, H);
  level.draw();
  player.draw();
  updatePlayerMovement();
  checkCollectNotes();
  checkLevelComplete();
  requestAnimationFrame(gameLoop);
}

// --- Event Listeners ---
window.addEventListener('keydown', e => {
  keysPressed[e.key] = true;
});

window.addEventListener('keyup', e => {
  keysPressed[e.key] = false;
});

// Touch Controls für Handy
const leftBtn = document.getElementById('leftBtn');
const rightBtn = document.getElementById('rightBtn');
const upBtn = document.getElementById('upBtn');
const downBtn = document.getElementById('downBtn');

leftBtn.addEventListener('touchstart', e => { e.preventDefault(); keysPressed['ArrowLeft'] = true; });
leftBtn.addEventListener('touchend', e => { e.preventDefault(); keysPressed['ArrowLeft'] = false; });
rightBtn.addEventListener('touchstart', e => { e.preventDefault(); keysPressed['ArrowRight'] = true; });
rightBtn.addEventListener('touchend', e => { e.preventDefault(); keysPressed['ArrowRight'] = false; });
upBtn.addEventListener('touchstart', e => { e.preventDefault(); keysPressed['ArrowUp'] = true; });
upBtn.addEventListener('touchend', e => { e.preventDefault(); keysPressed['ArrowUp'] = false; });
downBtn.addEventListener('touchstart', e => { e.preventDefault(); keysPressed['ArrowDown'] = true; });
downBtn.addEventListener('touchend', e => { e.preventDefault(); keysPressed['ArrowDown'] = false; });

// Touch Buttons nur auf kleinen Bildschirmen anzeigen
function updateTouchControlsVisibility() {
  const controls = document.getElementById('touchControls');
  if(window.innerWidth <= 600) {
    controls.style.display = 'flex';
  } else {
    controls.style.display = 'none';
  }
}
window.addEventListener('resize', updateTouchControlsVisibility);
updateTouchControlsVisibility();

// Initiale UI Werte
levelText.textContent = currentLevel;
livesText.textContent = player.lives;
scoreText.textContent = player.score;

// Start Game Loop
requestAnimationFrame(gameLoop);

</script>

</body>
</html>